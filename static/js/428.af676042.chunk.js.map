{"version":3,"file":"static/js/428.af676042.chunk.js","mappings":"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","sources":["redux/contacts/contactsSelectors.js","../node_modules/nanoid/index.browser.js","webpack://goit-react-hw-08-phonebook/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactListItem/ContactListItem.module.css?7127","components/ContactListItem/ContactListItem.jsx","webpack://goit-react-hw-08-phonebook/./src/components/ContactList/ContactList.module.css?1ce0","components/ContactList/ContactList.jsx","pages/ContactsPage/ContactsPage.jsx","../node_modules/prop-types/factoryWithThrowingShims.js","../node_modules/prop-types/index.js","../node_modules/prop-types/lib/ReactPropTypesSecret.js"],"sourcesContent":["export const getContacts = state => state.contacts.entities;\nexport const getFilteredContacts = state => state.contacts.filter;\nexport const IsLoading = state => state.contacts.isLoading;\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {\"phonebook\":\"ContactForm_phonebook__3VpZj\"};","import { useState } from 'react';\nimport { contactsOperations } from 'redux/contacts';\nimport { contactsSelectors } from 'redux/contacts';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { nanoid } from 'nanoid';\nimport Notiflix from 'notiflix';\nimport styles from './ContactForm.module.css';\n\nexport default function ContactForm() {\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n  const contacts = useSelector(contactsSelectors.getContacts);\n  const dispatch = useDispatch();\n\n  const nameId = nanoid();\n    const numberId = nanoid();\n\n  const handleFormSubmit = event => {\n    event.preventDefault();\n    const contactFinder = contacts.find(\n      contact => contact.name.toLowerCase() === name.toLowerCase()\n    );\n\n    if (!contactFinder) {\n      dispatch(contactsOperations.addContacts({ name, number }));\n      Notiflix.Notify.info('Contact created');\n      setName('');\n      setNumber('');\n    }\n    if (contactFinder) {\n      Notiflix.Notify.info(`${name} is already in contacts`);\n    \n    }\n  };\n\n  const handleChangeForm = event => {\n    const { name, value } = event.currentTarget;\n\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n return (\n        <div className={styles.phonebook}>\n            <h2>Phonebook</h2>\n            <form onSubmit={handleFormSubmit}>\n                <label htmlFor={nameId}>Name</label>\n                <input\n                    type=\"text\"\n                    name=\"name\"\n                    id={nameId}\n                    placeholder='Enter name'\n                    value={name}\n                    onChange={handleChangeForm}\n                    pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                    title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                    required\n                />\n                <br />\n                <label htmlFor={numberId}>Number</label>\n                <input\n                    type=\"tel\"\n                    id={numberId}\n                    name=\"number\"\n                    placeholder='Enter phone number'\n                    value={number}\n                    onChange={handleChangeForm}\n                    pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                    title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                    required\n                />\n                <br />\n                <button\n                    type='submit'>Add contact</button>\n                <br />\n            </form>\n        </div>\n    );\n};","// extracted by mini-css-extract-plugin\nexport default {\"filter\":\"Filter_filter__vxThR\",\"filterInput\":\"Filter_filterInput__1Cysk\"};","import React from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { getFilteredContacts } from 'redux/contacts/contactsSelectors';\nimport {filter} from 'redux/contacts/contactsActions';\nimport styles from './Filter.module.css';\n\n \nexport const Filter = () => {\n    const dispatch = useDispatch();\n    const filterValue = useSelector(getFilteredContacts);\n\n    const inputChange = e => {\n      const changeValue = e.target.value;\n      dispatch(filter(changeValue));\n    };\n\n    return (\n      <div className={styles.filterInput}>\n    <label>Find contacts by name</label>\n    <input className={styles.filter} type=\"text\" name=\"number\" value={filterValue} onChange={inputChange} placeholder='Enter name'/>\n  </div>);\n};\n\nexport default Filter;","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"ContactListItem_contacts__CBDzW\"};","\nimport { removeContacts } from 'redux/contacts/contactsOperations'\nimport { useDispatch } from 'react-redux';\nimport Notiflix from 'notiflix';\nimport PropTypes from 'prop-types';\nimport styles from './ContactListItem.module.css';\n\nconst ContactListItem = ({ id, number, name }) => {\n  const dispatch = useDispatch();\n\n  const removeButton = () => {\n    dispatch(removeContacts(id));\n    Notiflix.Notify.info('contact deleted');\n  }\n\n    return (\n      <div className={styles.contacts}>\n     <li key={id}>\n                  <p>\n                    <span>{name} : </span>\n            {number}\n            \n                  </p>\n                  <button type='button'\n                    onClick={removeButton}>\n                     \n                    X\n                  </button>\n            </li>\n            </div>\n  );\n};\n  \n  \nContactListItem.protoTypes = {\n  id: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  removeButton: PropTypes.func.isRequired,\n};\n\nexport default ContactListItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"contacts\":\"ContactList_contacts__jDmyV\"};","import React from 'react';\nimport ContactListItem from 'components/ContactListItem';\nimport { useEffect } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport { getContacts, getFilteredContacts} from 'redux/contacts/contactsSelectors';\nimport { fetchContacts } from 'redux/contacts/contactsOperations'\n// import Loader from 'components/Loader/loader';\nimport styles from './ContactList.module.css';\n\n\nconst ContactList = () => {\n  const contacts = useSelector(getContacts);\n  const value = useSelector(getFilteredContacts);\n  // const loading = useSelector(IsLoading);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch, contacts, value]);\n\n  const getFilteredNames = () => {\n    return contacts.filter(contact =>\n      contact.name.toLowerCase().includes(value)\n    );\n  };\n\n  const contactsMap = value === '' ? contacts : getFilteredNames();\n  \n  //  if (loading) {\n  //   return <Loader />;\n  // }\n\n  return (\n     <div className={styles.contacts}>\n      {contactsMap.map(({ id, phone, name }) => {\n        return <ContactListItem key={id} id={id} name={name} number={phone} />;\n      })}\n    </div>\n  );\n};\n\nContactList.propTypes = {\n  id: PropTypes.string,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nexport default ContactList;\n","import ContactForm from 'components/ContactForm';\nimport Filter from 'components/Filter';\nimport ContactList from 'components/ContactList';\n\nconst ContactsPage = () => {\n  return (\n    <div>\n      <ContactForm />\n      <Filter />\n      <ContactList />\n    </div>\n  );\n};\n\nexport default ContactsPage;\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = require('./lib/ReactPropTypesSecret');\n\nfunction emptyFunction() {}\nfunction emptyFunctionWithReset() {}\nemptyFunctionWithReset.resetWarningCache = emptyFunction;\n\nmodule.exports = function() {\n  function shim(props, propName, componentName, location, propFullName, secret) {\n    if (secret === ReactPropTypesSecret) {\n      // It is still safe when called from React.\n      return;\n    }\n    var err = new Error(\n      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +\n      'Use PropTypes.checkPropTypes() to call them. ' +\n      'Read more at http://fb.me/use-check-prop-types'\n    );\n    err.name = 'Invariant Violation';\n    throw err;\n  };\n  shim.isRequired = shim;\n  function getShim() {\n    return shim;\n  };\n  // Important!\n  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.\n  var ReactPropTypes = {\n    array: shim,\n    bigint: shim,\n    bool: shim,\n    func: shim,\n    number: shim,\n    object: shim,\n    string: shim,\n    symbol: shim,\n\n    any: shim,\n    arrayOf: getShim,\n    element: shim,\n    elementType: shim,\n    instanceOf: getShim,\n    node: shim,\n    objectOf: getShim,\n    oneOf: getShim,\n    oneOfType: getShim,\n    shape: getShim,\n    exact: getShim,\n\n    checkPropTypes: emptyFunctionWithReset,\n    resetWarningCache: emptyFunction\n  };\n\n  ReactPropTypes.PropTypes = ReactPropTypes;\n\n  return ReactPropTypes;\n};\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\nif (process.env.NODE_ENV !== 'production') {\n  var ReactIs = require('react-is');\n\n  // By explicitly using `prop-types` you are opting into new development behavior.\n  // http://fb.me/prop-types-in-prod\n  var throwOnDirectAccess = true;\n  module.exports = require('./factoryWithTypeCheckers')(ReactIs.isElement, throwOnDirectAccess);\n} else {\n  // By explicitly using `prop-types` you are opting into new production behavior.\n  // http://fb.me/prop-types-in-prod\n  module.exports = require('./factoryWithThrowingShims')();\n}\n","/**\n * Copyright (c) 2013-present, Facebook, Inc.\n *\n * This source code is licensed under the MIT license found in the\n * LICENSE file in the root directory of this source tree.\n */\n\n'use strict';\n\nvar ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';\n\nmodule.exports = ReactPropTypesSecret;\n"],"names":["getContacts","state","contacts","entities","getFilteredContacts","filter","nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","ContactForm","useState","name","setName","number","setNumber","useSelector","contactsSelectors","dispatch","useDispatch","nameId","numberId","handleChangeForm","event","currentTarget","value","className","styles","onSubmit","preventDefault","contactFinder","find","contact","toLowerCase","contactsOperations","addContacts","Notiflix","htmlFor","type","placeholder","onChange","pattern","title","required","filterValue","e","changeValue","target","ContactListItem","onClick","removeContacts","protoTypes","PropTypes","removeButton","useEffect","fetchContacts","contactsMap","includes","map","phone","ReactPropTypesSecret","require","emptyFunction","emptyFunctionWithReset","resetWarningCache","module","exports","shim","props","propName","componentName","location","propFullName","secret","err","Error","getShim","isRequired","ReactPropTypes","array","bigint","bool","func","object","string","symbol","any","arrayOf","element","elementType","instanceOf","node","objectOf","oneOf","oneOfType","shape","exact","checkPropTypes"],"sourceRoot":""}